#BlueJ class context
comment0.target=Grid
comment0.text=\n\ <code>Grid</code>\ provides\ an\ interface\ for\ a\ two-dimensional,\ grid-like\n\ environment\ containing\ arbitrary\ objects.\ <br\ />\n\ This\ interface\ is\ testable\ on\ the\ AP\ CS\ A\ and\ AB\ exams.\n
comment1.params=
comment1.target=int\ getNumRows()
comment1.text=\n\ Returns\ the\ number\ of\ rows\ in\ this\ grid.\n\ @return\ the\ number\ of\ rows,\ or\ -1\ if\ this\ grid\ is\ unbounded\n
comment10.params=loc
comment10.target=java.util.ArrayList\ getOccupiedAdjacentLocations(Location)
comment10.text=\n\ Gets\ the\ valid\ occupied\ locations\ adjacent\ to\ a\ given\ location\ in\ all\n\ eight\ compass\ directions\ (north,\ northeast,\ east,\ southeast,\ south,\n\ southwest,\ west,\ and\ northwest).\ <br\ />\n\ Precondition\:\ <code>loc</code>\ is\ valid\ in\ this\ grid\n\ @param\ loc\ a\ location\ in\ this\ grid\n\ @return\ an\ array\ list\ of\ the\ valid\ occupied\ locations\ adjacent\ to\n\ <code>loc</code>\u00A0in\ this\ grid\n
comment11.params=loc
comment11.target=java.util.ArrayList\ getNeighbors(Location)
comment11.text=\n\ Gets\ the\ neighboring\ occupants\ in\ all\ eight\ compass\ directions\ (north,\n\ northeast,\ east,\ southeast,\ south,\ southwest,\ west,\ and\ northwest).\n\ <br\ />\n\ Precondition\:\ <code>loc</code>\ is\ valid\ in\ this\ grid\n\ @param\ loc\ a\ location\ in\ this\ grid\n\ @return\ returns\ an\ array\ list\ of\ the\ objects\ in\ the\ occupied\ locations\n\ adjacent\ to\ <code>loc</code>\ in\ this\ grid\n
comment2.params=
comment2.target=int\ getNumCols()
comment2.text=\n\ Returns\ the\ number\ of\ columns\ in\ this\ grid.\n\ @return\ the\ number\ of\ columns,\ or\ -1\ if\ this\ grid\ is\ unbounded\n
comment3.params=loc
comment3.target=boolean\ isValid(Location)
comment3.text=\n\ Checks\ whether\ a\ location\ is\ valid\ in\ this\ grid.\ <br\ />\n\ Precondition\:\ <code>loc</code>\ is\ not\ <code>null</code>\n\ @param\ loc\ the\ location\ to\ check\n\ @return\ <code>true</code>\ if\ <code>loc</code>\ is\ valid\ in\ this\ grid,\n\ <code>false</code>\ otherwise\n
comment4.params=loc\ obj
comment4.target=java.lang.Object\ put(Location,\ java.lang.Object)
comment4.text=\n\ Puts\ an\ object\ at\ a\ given\ location\ in\ this\ grid.\ <br\ />\n\ Precondition\:\ (1)\ <code>loc</code>\ is\ valid\ in\ this\ grid\ (2)\n\ <code>obj</code>\ is\ not\ <code>null</code>\n\ @param\ loc\ the\ location\ at\ which\ to\ put\ the\ object\n\ @param\ obj\ the\ new\ object\ to\ be\ added\n\ @return\ the\ object\ previously\ at\ <code>loc</code>\ (or\ <code>null</code>\n\ if\ the\ location\ was\ previously\ unoccupied)\n
comment5.params=loc
comment5.target=java.lang.Object\ remove(Location)
comment5.text=\n\ Removes\ the\ object\ at\ a\ given\ location\ from\ this\ grid.\ <br\ />\n\ Precondition\:\ <code>loc</code>\ is\ valid\ in\ this\ grid\n\ @param\ loc\ the\ location\ of\ the\ object\ that\ is\ to\ be\ removed\n\ @return\ the\ object\ that\ was\ removed\ (or\ <code>null<code>\ if\ the\ location\n\ \ is\ unoccupied)\n
comment6.params=loc
comment6.target=java.lang.Object\ get(Location)
comment6.text=\n\ Returns\ the\ object\ at\ a\ given\ location\ in\ this\ grid.\ <br\ />\n\ Precondition\:\ <code>loc</code>\ is\ valid\ in\ this\ grid\n\ @param\ loc\ a\ location\ in\ this\ grid\n\ @return\ the\ object\ at\ location\ <code>loc</code>\ (or\ <code>null<code>\ \n\ \ if\ the\ location\ is\ unoccupied)\n
comment7.params=
comment7.target=java.util.ArrayList\ getOccupiedLocations()
comment7.text=\n\ Gets\ the\ locations\ in\ this\ grid\ that\ contain\ objects.\n\ @return\ an\ array\ list\ of\ all\ occupied\ locations\ in\ this\ grid\n
comment8.params=loc
comment8.target=java.util.ArrayList\ getValidAdjacentLocations(Location)
comment8.text=\n\ Gets\ the\ valid\ locations\ adjacent\ to\ a\ given\ location\ in\ all\ eight\n\ compass\ directions\ (north,\ northeast,\ east,\ southeast,\ south,\ southwest,\n\ west,\ and\ northwest).\ <br\ />\n\ Precondition\:\ <code>loc</code>\ is\ valid\ in\ this\ grid\n\ @param\ loc\ a\ location\ in\ this\ grid\n\ @return\ an\ array\ list\ of\ the\ valid\ locations\ adjacent\ to\ <code>loc</code>\n\ in\ this\ grid\n
comment9.params=loc
comment9.target=java.util.ArrayList\ getEmptyAdjacentLocations(Location)
comment9.text=\n\ Gets\ the\ valid\ empty\ locations\ adjacent\ to\ a\ given\ location\ in\ all\ eight\n\ compass\ directions\ (north,\ northeast,\ east,\ southeast,\ south,\ southwest,\n\ west,\ and\ northwest).\ <br\ />\n\ Precondition\:\ <code>loc</code>\ is\ valid\ in\ this\ grid\n\ @param\ loc\ a\ location\ in\ this\ grid\n\ @return\ an\ array\ list\ of\ the\ valid\ empty\ locations\ adjacent\ to\n\ <code>loc</code>\ in\ this\ grid\n
numComments=12
